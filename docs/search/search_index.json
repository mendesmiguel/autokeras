{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to Auto-Keras\n\n\n\n\n\n\nThis is a automated machine learning (AutoML) package based on Keras. \nIt aims at automatically search for the architecture and hyperparameters for deep learning models.\nThe ultimate goal for this project is for domain experts in fields other than computer science or machine learning\nto use deep learning models conveniently.\n\n\nHere is a short example for using the package.\n\n\nimport autokeras as ak\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nclf = ak.ImageClassifier()\nclf.fit(x_train, y_train)\nresults = clf.predict(y_test)\n\n\n\nFor the repository on GitHub visit \nAuto-Keras on GitHub\n.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-auto-keras",
            "text": "This is a automated machine learning (AutoML) package based on Keras. \nIt aims at automatically search for the architecture and hyperparameters for deep learning models.\nThe ultimate goal for this project is for domain experts in fields other than computer science or machine learning\nto use deep learning models conveniently.  Here is a short example for using the package.  import autokeras as ak\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nclf = ak.ImageClassifier()\nclf.fit(x_train, y_train)\nresults = clf.predict(y_test)  For the repository on GitHub visit  Auto-Keras on GitHub .",
            "title": "Welcome to Auto-Keras"
        },
        {
            "location": "/classifier/",
            "text": "ClassifierBase\n\n\nBase class of Classifier.\nClassifierBase is the base class of all classifier classes, classifier is used to train and predict data.\n\n\nAttributes\n\n\ny_encoder\n: An instance of OneHotEncoder for y_train (array of categorical labels).\n\n\nverbose\n: A boolean value indicating the verbosity mode.\n\n\nsearcher\n: An instance of one of the subclasses of Searcher. It search different\n    neural architecture to find the best model.\n\n\nsearcher_type\n: The type of searcher to use. It must be 'climb' or 'random'.\n\n\npath\n: A path to the directory to save the classifier.\n\n\nmodel_id\n: Identifier for the best model.\n\n\ninit\n\n\nInitialize the instance.\nThe classifier will be loaded from file if the directory in 'path' has a saved classifier. Otherwise it would create a new one.\n\n\n_validate\n\n\nCheck x_train's type and the shape of x_train, y_train.\n\n\nfit\n\n\nFind the best model.\nFormat the input, and split the dataset into training and testing set, save the classifier and find the best model.\n\n\nArgs\n\n\nx_train\n: An numpy.ndarray instance contains the training data.\n\n\ny_train\n: An numpy.ndarray instance contains the label of the training data.\n\n\npredict\n\n\nReturn predict result for the testing data.\n\n\nArgs\n\n\nx_test\n: An instance of numpy.ndarray contains the testing data.\n\n\nsummary\n\n\nPrint the summary of the best model.\n\n\n_get_searcher_class\n\n\nReturn searcher class based on the 'searcher_type'.\n\n\nevaluate\n\n\nReturn the accuracy score between predict value and test_y.\n\n\ncross_validate\n\n\nDo the n_splits cross-validation for the input.\n\n\nImageClassifier\n\n\nImage classifier class inherited from ClassifierBase class.\nIt is used for image classification. It searches convolutional neural network architectures for the best configuration for the dataset.\n\n\ninit",
            "title": "classifier"
        },
        {
            "location": "/classifier/#classifierbase",
            "text": "Base class of Classifier.\nClassifierBase is the base class of all classifier classes, classifier is used to train and predict data.",
            "title": "ClassifierBase"
        },
        {
            "location": "/classifier/#attributes",
            "text": "y_encoder : An instance of OneHotEncoder for y_train (array of categorical labels).  verbose : A boolean value indicating the verbosity mode.  searcher : An instance of one of the subclasses of Searcher. It search different\n    neural architecture to find the best model.  searcher_type : The type of searcher to use. It must be 'climb' or 'random'.  path : A path to the directory to save the classifier.  model_id : Identifier for the best model.",
            "title": "Attributes"
        },
        {
            "location": "/classifier/#init",
            "text": "Initialize the instance.\nThe classifier will be loaded from file if the directory in 'path' has a saved classifier. Otherwise it would create a new one.",
            "title": "init"
        },
        {
            "location": "/classifier/#_validate",
            "text": "Check x_train's type and the shape of x_train, y_train.",
            "title": "_validate"
        },
        {
            "location": "/classifier/#fit",
            "text": "Find the best model.\nFormat the input, and split the dataset into training and testing set, save the classifier and find the best model.",
            "title": "fit"
        },
        {
            "location": "/classifier/#args",
            "text": "x_train : An numpy.ndarray instance contains the training data.  y_train : An numpy.ndarray instance contains the label of the training data.",
            "title": "Args"
        },
        {
            "location": "/classifier/#predict",
            "text": "Return predict result for the testing data.",
            "title": "predict"
        },
        {
            "location": "/classifier/#args_1",
            "text": "x_test : An instance of numpy.ndarray contains the testing data.",
            "title": "Args"
        },
        {
            "location": "/classifier/#summary",
            "text": "Print the summary of the best model.",
            "title": "summary"
        },
        {
            "location": "/classifier/#_get_searcher_class",
            "text": "Return searcher class based on the 'searcher_type'.",
            "title": "_get_searcher_class"
        },
        {
            "location": "/classifier/#evaluate",
            "text": "Return the accuracy score between predict value and test_y.",
            "title": "evaluate"
        },
        {
            "location": "/classifier/#cross_validate",
            "text": "Do the n_splits cross-validation for the input.",
            "title": "cross_validate"
        },
        {
            "location": "/classifier/#imageclassifier",
            "text": "Image classifier class inherited from ClassifierBase class.\nIt is used for image classification. It searches convolutional neural network architectures for the best configuration for the dataset.",
            "title": "ImageClassifier"
        },
        {
            "location": "/classifier/#init_1",
            "text": "",
            "title": "init"
        },
        {
            "location": "/search/",
            "text": "Searcher\n\n\nBase class of all searcher class\nThis class is the base class of all searcher class, every searcher class can override its search function to implements its strategy\n\n\nAttributes\n\n\nn_classes\n: number of classification\n\n\ninput_shape\n: Arbitrary, although all dimensions in the input shaped must be fixed.\n           Use the keyword argument input_shape (tuple of integers, does not include the batch axis)\n           when using this layer as the first layer in a model.\n\n\nverbose\n: verbosity mode\n\n\nhistory_configs\n: a list that stores all historical configuration\n\n\nhistory\n: a list that stores the performance of model\n\n\npath\n: place that store searcher\n\n\nmodel_count\n: the id of model\n\n\ninit\n\n\nInit Searcher class with n_classes, input_shape, path, verbose\nThe Searcher will be loaded from file if it has been saved before.\n\n\nsearch\n\n\nan search strategy that will be overridden by children classes\n\n\nload_best_model\n\n\nreturn model with best accuracy\n\n\nadd_model\n\n\nadd one model while will be trained to history list\n\n\nRandomSearcher\n\n\nRandom Searcher class inherited from ClassifierBase class\nRandomSearcher implements its search function with random strategy\n\n\ninit\n\n\nInit RandomSearcher with n_classes, input_shape, path, verbose\n\n\nsearch\n\n\nOverride parent's search function. First model is randomly generated\n\n\nHillClimbingSearcher\n\n\nHillClimbing Searcher class inherited from ClassifierBase class\nHillClimbing Searcher implements its search function with hill climbing strategy\n\n\ninit\n\n\nInit HillClimbing Searcher with n_classes, input_shape, path, verbose\n\n\n_remove_duplicate\n\n\nRemove the duplicate in the history_models\n\n\nsearch\n\n\nOverride parent's search function. First model is randomly generated",
            "title": "search"
        },
        {
            "location": "/search/#searcher",
            "text": "Base class of all searcher class\nThis class is the base class of all searcher class, every searcher class can override its search function to implements its strategy",
            "title": "Searcher"
        },
        {
            "location": "/search/#attributes",
            "text": "n_classes : number of classification  input_shape : Arbitrary, although all dimensions in the input shaped must be fixed.\n           Use the keyword argument input_shape (tuple of integers, does not include the batch axis)\n           when using this layer as the first layer in a model.  verbose : verbosity mode  history_configs : a list that stores all historical configuration  history : a list that stores the performance of model  path : place that store searcher  model_count : the id of model",
            "title": "Attributes"
        },
        {
            "location": "/search/#init",
            "text": "Init Searcher class with n_classes, input_shape, path, verbose\nThe Searcher will be loaded from file if it has been saved before.",
            "title": "init"
        },
        {
            "location": "/search/#search",
            "text": "an search strategy that will be overridden by children classes",
            "title": "search"
        },
        {
            "location": "/search/#load_best_model",
            "text": "return model with best accuracy",
            "title": "load_best_model"
        },
        {
            "location": "/search/#add_model",
            "text": "add one model while will be trained to history list",
            "title": "add_model"
        },
        {
            "location": "/search/#randomsearcher",
            "text": "Random Searcher class inherited from ClassifierBase class\nRandomSearcher implements its search function with random strategy",
            "title": "RandomSearcher"
        },
        {
            "location": "/search/#init_1",
            "text": "Init RandomSearcher with n_classes, input_shape, path, verbose",
            "title": "init"
        },
        {
            "location": "/search/#search_1",
            "text": "Override parent's search function. First model is randomly generated",
            "title": "search"
        },
        {
            "location": "/search/#hillclimbingsearcher",
            "text": "HillClimbing Searcher class inherited from ClassifierBase class\nHillClimbing Searcher implements its search function with hill climbing strategy",
            "title": "HillClimbingSearcher"
        },
        {
            "location": "/search/#init_2",
            "text": "Init HillClimbing Searcher with n_classes, input_shape, path, verbose",
            "title": "init"
        },
        {
            "location": "/search/#_remove_duplicate",
            "text": "Remove the duplicate in the history_models",
            "title": "_remove_duplicate"
        },
        {
            "location": "/search/#search_2",
            "text": "Override parent's search function. First model is randomly generated",
            "title": "search"
        },
        {
            "location": "/graph/",
            "text": "Graph\n\n\nA class represent the neural architecture graph of a Keras model.\nGraph extracts the neural architecture graph from a Keras model. Each node in the graph is a intermediate tensor between layers. Each layer is an edge in the graph.  Notably, multiple edges may refer to the same layer. (e.g. WeightedAdd layer is adding two tensor into one tensor. So it is related to two edges.)\n\n\nAttributes\n\n\nmodel\n: The Keras model, from which to extract the graph.\n\n\nnode_list\n: A list of tensors, the indices of the list are the identifiers.\n\n\nlayer_list\n: A list of Keras layers, the indices of the list are the identifiers.\n\n\nnode_to_id\n: A dict instance mapping from tensors to their identifiers.\n\n\nlayer_to_id\n: A dict instance mapping from Keras layers to their identifiers.\n\n\nlayer_id_to_input_node_ids\n: A dict instance mapping from layer identifiers\n    to their input nodes identifiers.\n\n\nold_layer_ids\n: A dict instance stores the identifiers of the not updated layers.\n\n\nadj_list\n: A two dimensional list. The adjacency list of the graph. The first dimension is\n    identified by tensor identifiers. In each edge list, the elements are two-element tuples\n    of (tensor identifier, layer identifier).\n\n\nreverse_adj_list\n: A reverse adjacent list in the same format as adj_list.\n\n\nnext_vis\n: A boolean list marking whether a node has been visited or not.\n\n\npre_vis\n: A boolean list marking whether a node has been visited or not.\n\n\nmiddle_layer_vis\n: A boolean list marking whether a node has been visited or not.\n\n\ninit\n\n\nn_nodes\n\n\nReturn the number of nodes in the model.\n\n\nn_layers\n\n\nReturn the number of layers in the model.\n\n\n_add_node\n\n\nAdd node to node list if it not in node list.\n\n\n_add_edge\n\n\nAdd edge to the graph.\n\n\n_redirect_edge\n\n\nRedirect the edge to a new node. Change the edge originally from u_id to v_id into an edge from u_id to new_v_id while keeping all other property of the edge the same.\n\n\n_search_next\n\n\nSearch downward the graph for widening the layers.\n\n\nArgs\n\n\nu\n: The starting node identifier.\n\n\nstart_dim\n: The dimension to insert the additional dimensions.\n\n\ntotal_dim\n: The total number of dimensions the layer has before widening.\n\n\nn_add\n: The number of dimensions to add.\n\n\n_search_pre\n\n\nSearch upward the graph for widening the layers.\n\n\nArgs\n\n\nu\n: The starting node identifier.\n\n\nstart_dim\n: The dimension to insert the additional dimensions.\n\n\ntotal_dim\n: The total number of dimensions the layer has before widening.\n\n\nn_add\n: The number of dimensions to add.\n\n\n_replace_layer\n\n\nReplace the layer with a new layer.\n\n\n_topological_order\n\n\nReturn the topological order of the nodes.\n\n\nto_add_skip_model\n\n\nAdd a weighted add skip connection from start node to end node.\n\n\nReturns\n\n\nA new Keras model with the added connection.\n\n\nto_concat_skip_model\n\n\nAdd a weighted add concatenate connection from start node to end node.\n\n\nReturns\n\n\nA new Keras model with the added connection.\n\n\nto_conv_deeper_model\n\n\nInsert a convolution, batch-normalization, relu block after the target block.\n\n\nArgs\n\n\ntarget\n: A convolutional layer. The new block should be inserted after the relu layer\n    in its conv-batch-relu block.\n\n\nkernel_size\n: An integer. The kernel size of the new convolutional layer.\n\n\nReturns\n\n\nA new Keras model with the inserted block.\n\n\nto_wider_model\n\n\nWiden the last dimension of the output of the pre_layer.\n\n\nArgs\n\n\npre_layer\n: A convolutional layer or dense layer.\n\n\nn_add\n: The number of dimensions to add.\n\n\nReturns\n\n\nA new Keras model with the widened layers.\n\n\nto_dense_deeper_model\n\n\nInsert a dense layer after the target layer.\n\n\nArgs\n\n\ntarget\n: A dense layer.\n\n\nReturns\n\n\nA new Keras model with an inserted dense layer.\n\n\nproduce_model\n\n\nBuild a new Keras model based on the current graph.\n\n\nget_pooling_layers\n\n\n_depth_first_search",
            "title": "graph"
        },
        {
            "location": "/graph/#graph",
            "text": "A class represent the neural architecture graph of a Keras model.\nGraph extracts the neural architecture graph from a Keras model. Each node in the graph is a intermediate tensor between layers. Each layer is an edge in the graph.  Notably, multiple edges may refer to the same layer. (e.g. WeightedAdd layer is adding two tensor into one tensor. So it is related to two edges.)",
            "title": "Graph"
        },
        {
            "location": "/graph/#attributes",
            "text": "model : The Keras model, from which to extract the graph.  node_list : A list of tensors, the indices of the list are the identifiers.  layer_list : A list of Keras layers, the indices of the list are the identifiers.  node_to_id : A dict instance mapping from tensors to their identifiers.  layer_to_id : A dict instance mapping from Keras layers to their identifiers.  layer_id_to_input_node_ids : A dict instance mapping from layer identifiers\n    to their input nodes identifiers.  old_layer_ids : A dict instance stores the identifiers of the not updated layers.  adj_list : A two dimensional list. The adjacency list of the graph. The first dimension is\n    identified by tensor identifiers. In each edge list, the elements are two-element tuples\n    of (tensor identifier, layer identifier).  reverse_adj_list : A reverse adjacent list in the same format as adj_list.  next_vis : A boolean list marking whether a node has been visited or not.  pre_vis : A boolean list marking whether a node has been visited or not.  middle_layer_vis : A boolean list marking whether a node has been visited or not.",
            "title": "Attributes"
        },
        {
            "location": "/graph/#init",
            "text": "",
            "title": "init"
        },
        {
            "location": "/graph/#n_nodes",
            "text": "Return the number of nodes in the model.",
            "title": "n_nodes"
        },
        {
            "location": "/graph/#n_layers",
            "text": "Return the number of layers in the model.",
            "title": "n_layers"
        },
        {
            "location": "/graph/#_add_node",
            "text": "Add node to node list if it not in node list.",
            "title": "_add_node"
        },
        {
            "location": "/graph/#_add_edge",
            "text": "Add edge to the graph.",
            "title": "_add_edge"
        },
        {
            "location": "/graph/#_redirect_edge",
            "text": "Redirect the edge to a new node. Change the edge originally from u_id to v_id into an edge from u_id to new_v_id while keeping all other property of the edge the same.",
            "title": "_redirect_edge"
        },
        {
            "location": "/graph/#_search_next",
            "text": "Search downward the graph for widening the layers.",
            "title": "_search_next"
        },
        {
            "location": "/graph/#args",
            "text": "u : The starting node identifier.  start_dim : The dimension to insert the additional dimensions.  total_dim : The total number of dimensions the layer has before widening.  n_add : The number of dimensions to add.",
            "title": "Args"
        },
        {
            "location": "/graph/#_search_pre",
            "text": "Search upward the graph for widening the layers.",
            "title": "_search_pre"
        },
        {
            "location": "/graph/#args_1",
            "text": "u : The starting node identifier.  start_dim : The dimension to insert the additional dimensions.  total_dim : The total number of dimensions the layer has before widening.  n_add : The number of dimensions to add.",
            "title": "Args"
        },
        {
            "location": "/graph/#_replace_layer",
            "text": "Replace the layer with a new layer.",
            "title": "_replace_layer"
        },
        {
            "location": "/graph/#_topological_order",
            "text": "Return the topological order of the nodes.",
            "title": "_topological_order"
        },
        {
            "location": "/graph/#to_add_skip_model",
            "text": "Add a weighted add skip connection from start node to end node.",
            "title": "to_add_skip_model"
        },
        {
            "location": "/graph/#returns",
            "text": "A new Keras model with the added connection.",
            "title": "Returns"
        },
        {
            "location": "/graph/#to_concat_skip_model",
            "text": "Add a weighted add concatenate connection from start node to end node.",
            "title": "to_concat_skip_model"
        },
        {
            "location": "/graph/#returns_1",
            "text": "A new Keras model with the added connection.",
            "title": "Returns"
        },
        {
            "location": "/graph/#to_conv_deeper_model",
            "text": "Insert a convolution, batch-normalization, relu block after the target block.",
            "title": "to_conv_deeper_model"
        },
        {
            "location": "/graph/#args_2",
            "text": "target : A convolutional layer. The new block should be inserted after the relu layer\n    in its conv-batch-relu block.  kernel_size : An integer. The kernel size of the new convolutional layer.",
            "title": "Args"
        },
        {
            "location": "/graph/#returns_2",
            "text": "A new Keras model with the inserted block.",
            "title": "Returns"
        },
        {
            "location": "/graph/#to_wider_model",
            "text": "Widen the last dimension of the output of the pre_layer.",
            "title": "to_wider_model"
        },
        {
            "location": "/graph/#args_3",
            "text": "pre_layer : A convolutional layer or dense layer.  n_add : The number of dimensions to add.",
            "title": "Args"
        },
        {
            "location": "/graph/#returns_3",
            "text": "A new Keras model with the widened layers.",
            "title": "Returns"
        },
        {
            "location": "/graph/#to_dense_deeper_model",
            "text": "Insert a dense layer after the target layer.",
            "title": "to_dense_deeper_model"
        },
        {
            "location": "/graph/#args_4",
            "text": "target : A dense layer.",
            "title": "Args"
        },
        {
            "location": "/graph/#returns_4",
            "text": "A new Keras model with an inserted dense layer.",
            "title": "Returns"
        },
        {
            "location": "/graph/#produce_model",
            "text": "Build a new Keras model based on the current graph.",
            "title": "produce_model"
        },
        {
            "location": "/graph/#get_pooling_layers",
            "text": "",
            "title": "get_pooling_layers"
        },
        {
            "location": "/graph/#_depth_first_search",
            "text": "",
            "title": "_depth_first_search"
        },
        {
            "location": "/net_transformer/",
            "text": "",
            "title": "net_transformer"
        },
        {
            "location": "/preprocessor/",
            "text": "OneHotEncoder\n\n\nA class that can format data\nThis class provide ways to transform data's classification into vector\n\n\nAttributes\n\n\ndata\n: the input data\n\n\nn_classes\n: the number of classification\n\n\nlabels\n: the number of label\n\n\nlabel_to_vec\n: mapping from label to vector\n\n\nint_to_label\n: mapping from int to label\n\n\ninit\n\n\nInit OneHotEncoder\n\n\nfit\n\n\nCreate mapping from label to vector, and vector to label\n\n\ntransform\n\n\nGet vector for every element in the data array\n\n\ninverse_transform\n\n\nGet label for every element in data",
            "title": "preprocessor"
        },
        {
            "location": "/preprocessor/#onehotencoder",
            "text": "A class that can format data\nThis class provide ways to transform data's classification into vector",
            "title": "OneHotEncoder"
        },
        {
            "location": "/preprocessor/#attributes",
            "text": "data : the input data  n_classes : the number of classification  labels : the number of label  label_to_vec : mapping from label to vector  int_to_label : mapping from int to label",
            "title": "Attributes"
        },
        {
            "location": "/preprocessor/#init",
            "text": "Init OneHotEncoder",
            "title": "init"
        },
        {
            "location": "/preprocessor/#fit",
            "text": "Create mapping from label to vector, and vector to label",
            "title": "fit"
        },
        {
            "location": "/preprocessor/#transform",
            "text": "Get vector for every element in the data array",
            "title": "transform"
        },
        {
            "location": "/preprocessor/#inverse_transform",
            "text": "Get label for every element in data",
            "title": "inverse_transform"
        },
        {
            "location": "/utils/",
            "text": "ModelTrainer\n\n\nA class that is used to train model\nThis class can train a model with dataset and will not stop until getting minimum loss\n\n\nAttributes\n\n\nmodel\n: the model that will be trained\n\n\nx_train\n: the input train data\n\n\ny_train\n: the input train data labels\n\n\nx_test\n: the input test data\n\n\ny_test\n: the input test data labels\n\n\nverbose\n: verbosity mode\n\n\ntraining_losses\n: a list to store all losses during training\n\n\nminimum_loss\n: the minimum loss during training\n\n\n_no_improvement_count\n: the number of iterations that don't improve the result\n\n\ninit\n\n\nInit ModelTrainer with model, x_train, y_train, x_test, y_test, verbose\n\n\n_converged\n\n\nReturn whether the training is converged\n\n\ntrain_model\n\n\nTrain the model with dataset and return the minimum_loss",
            "title": "utils"
        },
        {
            "location": "/utils/#modeltrainer",
            "text": "A class that is used to train model\nThis class can train a model with dataset and will not stop until getting minimum loss",
            "title": "ModelTrainer"
        },
        {
            "location": "/utils/#attributes",
            "text": "model : the model that will be trained  x_train : the input train data  y_train : the input train data labels  x_test : the input test data  y_test : the input test data labels  verbose : verbosity mode  training_losses : a list to store all losses during training  minimum_loss : the minimum loss during training  _no_improvement_count : the number of iterations that don't improve the result",
            "title": "Attributes"
        },
        {
            "location": "/utils/#init",
            "text": "Init ModelTrainer with model, x_train, y_train, x_test, y_test, verbose",
            "title": "init"
        },
        {
            "location": "/utils/#_converged",
            "text": "Return whether the training is converged",
            "title": "_converged"
        },
        {
            "location": "/utils/#train_model",
            "text": "Train the model with dataset and return the minimum_loss",
            "title": "train_model"
        },
        {
            "location": "/generator/",
            "text": "ClassifierGenerator\n\n\nThe base class of classifier generators.\nClassifierGenerator is the base class of all classifier generator classes. It is used for generating classifier models.\n\n\nAttributes\n\n\nn_classes\n: Number of classes in the input data.\n\n\ninput_shape\n: A tuple of integers containing the size of each dimension of the input data,\n    excluding the dimension of number of training examples. The length of the tuple should\n    between two and four inclusively.\n\n\ninit\n\n\n_get_pool_layer_func\n\n\nReturn MaxPooling function based on the dimension of input shape.\n\n\n_get_shape\n\n\nReturn filter shape tuple based on the dimension of input shape.\n\n\nDefaultClassifierGenerator\n\n\nA classifier generator always generates models with the same default architecture and configuration.\n\n\ninit\n\n\ngenerate\n\n\nReturn the default classifier model that has been compiled.\n\n\nRandomConvClassifierGenerator\n\n\nA classifier generator that generates random convolutional neural networks.\n\n\ninit\n\n\ngenerate\n\n\nReturn the random generated CNN model.",
            "title": "generator"
        },
        {
            "location": "/generator/#classifiergenerator",
            "text": "The base class of classifier generators.\nClassifierGenerator is the base class of all classifier generator classes. It is used for generating classifier models.",
            "title": "ClassifierGenerator"
        },
        {
            "location": "/generator/#attributes",
            "text": "n_classes : Number of classes in the input data.  input_shape : A tuple of integers containing the size of each dimension of the input data,\n    excluding the dimension of number of training examples. The length of the tuple should\n    between two and four inclusively.",
            "title": "Attributes"
        },
        {
            "location": "/generator/#init",
            "text": "",
            "title": "init"
        },
        {
            "location": "/generator/#_get_pool_layer_func",
            "text": "Return MaxPooling function based on the dimension of input shape.",
            "title": "_get_pool_layer_func"
        },
        {
            "location": "/generator/#_get_shape",
            "text": "Return filter shape tuple based on the dimension of input shape.",
            "title": "_get_shape"
        },
        {
            "location": "/generator/#defaultclassifiergenerator",
            "text": "A classifier generator always generates models with the same default architecture and configuration.",
            "title": "DefaultClassifierGenerator"
        },
        {
            "location": "/generator/#init_1",
            "text": "",
            "title": "init"
        },
        {
            "location": "/generator/#generate",
            "text": "Return the default classifier model that has been compiled.",
            "title": "generate"
        },
        {
            "location": "/generator/#randomconvclassifiergenerator",
            "text": "A classifier generator that generates random convolutional neural networks.",
            "title": "RandomConvClassifierGenerator"
        },
        {
            "location": "/generator/#init_2",
            "text": "",
            "title": "init"
        },
        {
            "location": "/generator/#generate_1",
            "text": "Return the random generated CNN model.",
            "title": "generate"
        },
        {
            "location": "/about/",
            "text": "About\n\n\nThis package is developed by \nDATA LAB\n at Texas A&M University.",
            "title": "About"
        },
        {
            "location": "/about/#about",
            "text": "This package is developed by  DATA LAB  at Texas A&M University.",
            "title": "About"
        }
    ]
}